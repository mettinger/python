ðŸ“¦
1342 /fridaQBDITest.js.map
1210 /fridaQBDITest.js
48933 /frida-qbdi.js.map
76658 /frida-qbdi.js
âœ„
{"version":3,"file":"fridaQBDITest.js","sourceRoot":"/mnt/c/Users/jetti/github/python/reverseEng/kaliBinaryInst/frida/","sources":["fridaQBDITest.js"],"names":[],"mappings":"AAAA,OAAO;AACP,OAAO,EAAE,EAAE,EAAE,YAAY,EAAE,QAAQ,EAAE,MAAM,iBAAiB,CAAC;AAE7D,kBAAkB;AAClB,IAAI,EAAE,GAAG,IAAI,EAAE,EAAE,CAAC;AAClB,IAAI,KAAK,GAAG,EAAE,CAAC,WAAW,EAAE,CAAC;AAC7B,IAAI,KAAK,GAAG,EAAE,CAAC,oBAAoB,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC;AAErD,6CAA6C;AAC7C,IAAI,OAAO,GAAG,MAAM,CAAC,gBAAgB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;AACtD,IAAI,CAAC,OAAO,EAAE;IACV,OAAO,GAAG,WAAW,CAAC,QAAQ,CAAC,QAAQ,CAAC,CAAC,OAAO,CAAC;CACpD;AACD,EAAE,CAAC,6BAA6B,CAAC,OAAO,CAAC,CAAC;AAE1C,gCAAgC;AAChC,4FAA4F;AAC5F,2CAA2C;AAC3C,IAAI,IAAI,GAAG,EAAE,CAAC,eAAe,CAAC,UAAS,EAAE,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI;IACrD,IAAI,IAAI,GAAG,EAAE,CAAC,eAAe,EAAE,CAAC;IAChC,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,KAAK,CAAC,EAAC;QAC5B,OAAO,QAAQ,CAAC,QAAQ,CAAC;KAC5B;IACD,GAAG,CAAC,IAAI,EAAE,CAAC,CAAC,kBAAkB;IAC9B,sBAAsB;IACtB,OAAO,CAAC,GAAG,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE,CAAC,GAAG,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,mCAAmC;IAC3G,OAAO,QAAQ,CAAC,QAAQ,CAAC;AAC7B,CAAC,CAAC,CAAC;AACH,IAAI,GAAG,GAAG,EAAE,CAAC,SAAS,CAAC,YAAY,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AAEnD,6CAA6C;AAC7C,IAAI,IAAI,GAAG,MAAM,CAAC,eAAe,CAAC,eAAe,CAAC,CAAC;AACnD,sEAAsE;AACtE,EAAE,CAAC,IAAI,CAAC,OAAO,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC"}
âœ„
// QBDI
import { VM, InstPosition, VMAction } from "./frida-qbdi.js";
// Initialize QBDI
var vm = new VM();
var state = vm.getGPRState();
var stack = vm.allocateVirtualStack(state, 0x100000);
// Instrument "Secret" function from demo.bin
var funcPtr = Module.findExportByName(null, "Secret");
if (!funcPtr) {
    funcPtr = DebugSymbol.fromName("Secret").address;
}
vm.addInstrumentedModuleFromAddr(funcPtr);
// Callback on every instruction
// This callback will print context and display current instruction address and dissassembly
// We choose to print only XOR instructions
var icbk = vm.newInstCallback(function (vm, gpr, fpr, data) {
    var inst = vm.getInstAnalysis();
    if (inst.mnemonic.search("XOR")) {
        return VMAction.CONTINUE;
    }
    gpr.dump(); // Display context
    //console.log("hello")
    console.log("0x" + inst.address.toString(16) + " " + inst.disassembly); // Display instruction dissassembly
    return VMAction.CONTINUE;
});
var iid = vm.addCodeCB(InstPosition.PREINST, icbk);
// Allocate a string in remote process memory
var strP = Memory.allocUtf8String("Hello world !");
// Call the Secret function using QBDI and with our string as argument
vm.call(funcPtr, [strP]);
âœ„
{"version":3,"file":"frida-qbdi.js","sourceRoot":"/mnt/c/Users/jetti/github/python/reverseEng/kaliBinaryInst/frida/","sources":["frida-qbdi.js"],"names":[],"mappings":"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"}
âœ„
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _VM_vm, _VM_memoryAccessDesc, _VM_operandAnalysisStructDesc, _VM_instAnalysisStructDesc, _VM_vmStateStructDesc, _VM_userDataPtrMap, _VM_userDataIIdMap, _VM_userDataPointer;
/*
 * Usage:
 * $ frida -n Twitter -l frida-qbdi.js
 *
 */
export var QBDI_MAJOR = 0;
export var QBDI_MINOR = 10;
export var QBDI_PATCH = 1;
/**
 * Minimum version of QBDI to use Frida bindings
 */
export var QBDI_MINIMUM_VERSION = (QBDI_MAJOR << 16) | (QBDI_MINOR << 8) | QBDI_PATCH;
if (typeof Duktape === 'object') {
    // Warn about duktape runtime (except on iOS...)
    if (Process.platform !== 'darwin' || Process.arch.indexOf("arm") !== 0) {
        console.warn("[!] Warning: using duktape runtime is much slower...");
        console.warn("    => Frida --enable-jit option should be used");
    }
}
// Provide a generic and "safe" (no exceptions if symbol is not found) way to load
// a library and bind/create a native function
class Binder {
    constructor() { }
    findLibrary(lib, paths) {
        if (lib === undefined) {
            return undefined;
        }
        var cpath = undefined;
        if (paths !== undefined) {
            var cnt = paths.length;
            var found = false;
            // try to find our library
            for (var i = 0; i < cnt; i++) {
                cpath = paths[i] + lib;
                // use Frida file interface to test if file exists...
                try {
                    var fp = new File(cpath, "rb");
                    fp.close();
                    found = true;
                    break;
                }
                catch (e) {
                    continue;
                }
            }
            if (!found) {
                return undefined;
            }
        }
        else {
            cpath = lib;
        }
        return cpath;
    }
    safeNativeFunction(cbk, ret, args) {
        var e = cbk();
        if (!e) {
            return undefined;
        }
        return new NativeFunction(e, ret, args);
    }
    load(lib, paths) {
        var cpath = this.findLibrary(lib, paths);
        if (cpath === undefined) {
            var errmsg = lib + ' library not found...';
            console.error(errmsg);
            throw new Error(errmsg);
        }
        // load library
        var handle = System.dlopen(cpath);
        if (handle.isNull()) {
            var errmsg = 'Failed to load ' + cpath + ' (' + System.dlerror() + ')';
            console.error(errmsg);
            throw new Error(errmsg);
        }
        return cpath;
    }
    bind(name, ret, args) {
        return this.safeNativeFunction(function () {
            return Module.findExportByName(null, name);
        }, ret, args);
    }
}
class QBDIBinder extends Binder {
    /**
     * QBDI library name
     */
    get QBDI_LIB() {
        return {
            'linux': 'libQBDI.so',
            'darwin': 'libQBDI.dylib',
            'windows': 'QBDI.dll',
        }[Process.platform];
    }
    // paths where QBDI library may be
    get QBDI_PATHS() {
        return [
            // UNIX default paths
            '/usr/lib/',
            '/usr/local/lib/',
            // advised Android path
            '/data/local/tmp/',
            // in case of a local archive
            './',
            './lib',
            // Windows default path
            'C:\\Program Files\\QBDI ' + QBDI_MAJOR + '.' + QBDI_MINOR + '.' + QBDI_PATCH + '\\lib\\'
        ];
    }
    bind(name, ret, args) {
        var libpath = this.QBDI_LIB;
        return this.safeNativeFunction(function () {
            return Module.findExportByName(libpath, name);
        }, ret, args);
    }
    load() {
        return super.load(this.QBDI_LIB, this.QBDI_PATHS);
    }
}
var _binder = new Binder();
var _qbdibinder = new QBDIBinder();
// Needed to load QBDI
var System_C = Object.freeze({
    LoadLibraryEx: _binder.bind('LoadLibraryExA', 'pointer', ['pointer', 'int', 'int']),
    GetLastError: _binder.bind('GetLastError', 'int', []),
    dlopen: _binder.bind('dlopen', 'pointer', ['pointer', 'int']),
    dlerror: _binder.bind('dlerror', 'pointer', []),
    free: _binder.bind('free', 'void', ['pointer']),
});
var System = Object.freeze({
    dlerror: function () {
        if (Process.platform === "windows") {
            var val = System_C.GetLastError();
            if (val === undefined) {
                return undefined;
            }
            return val.toString();
        }
        var strPtr = System_C.dlerror();
        return Memory.readCString(strPtr);
    },
    dlopen: function (library) {
        var RTLD_LOCAL = 0x0;
        var RTLD_LAZY = 0x1;
        var path = Memory.allocUtf8String(library);
        if (Process.platform === "windows") {
            return System_C.LoadLibraryEx(path, 0, 0);
        }
        return System_C.dlopen(path, RTLD_LOCAL | RTLD_LAZY);
    },
    free: function (ptr) {
        System_C.free(ptr);
    }
});
/**
 * Fullpath of the QBDI library
 */
// Load QBDI library
var QBDI_LIB_FULLPATH = _qbdibinder.load();
// Define rword type and interfaces
/**
 * An alias to Frida uint type with the size of general registers (**uint64** or **uint32**)
 */
export var rword = Process.pointerSize === 8 ? 'uint64' : 'uint32';
Memory.readRword = Process.pointerSize === 8 ? Memory.readU64 : Memory.readU32;
Memory.writeRword = Process.pointerSize === 8 ? Memory.writeU64 : Memory.writeU32;
// Convert a number to its register-sized representation
/**
 * Convert a NativePointer into a type with the size of a register (``Number`` or ``UInt64``).
 */
NativePointer.prototype.toRword = function () {
    // Nothing better really ?
    if (Process.pointerSize === 8) {
        return uint64("0x" + this.toString(16));
    }
    return parseInt(this.toString(16), 16);
};
/**
 * Convert a number into a type with the size of a register (``Number`` or ``UInt64``).
 * Can't be used for numbers > 32 bits, would cause weird results due to IEEE-754.
 */
Number.prototype.toRword = function () {
    if (this > 0x100000000) {
        throw new TypeError('For integer > 32 bits, please use Frida uint64 type.');
    }
    if (Process.pointerSize === 8) {
        return uint64(this);
    }
    return this;
};
/**
 * An identity function (returning the same ``UInt64`` object).
 * It exists only to provide a unified **toRword** interface.
 */
UInt64.prototype.toRword = function () {
    return this;
};
// Some helpers
String.prototype.leftPad = function (paddingValue, paddingLength) {
    paddingLength = paddingLength || paddingValue.length;
    if (paddingLength < this.length) {
        return String(this);
    }
    return String(paddingValue + this).slice(-paddingLength);
};
/**
 * Convert a String into a type with the size of a register (``Number`` or ``UInt64``).
 */
String.prototype.toRword = function () {
    return ptr(this).toRword();
};
/**
 * This function is used to pretty print a pointer, padded with 0 to the size of a register.
 *
 * @param ptr Pointer you want to pad
 *
 * @return pointer value as padded string (ex: "0x00004242")
 */
export function hexPointer(ptr) {
    return ptr.toString(16).leftPad("0000000000000000", Process.pointerSize * 2);
}
//
var QBDI_C = Object.freeze({
    // VM
    initVM: _qbdibinder.bind('qbdi_initVM', 'void', ['pointer', 'pointer', 'pointer', rword]),
    terminateVM: _qbdibinder.bind('qbdi_terminateVM', 'void', ['pointer']),
    getOptions: _qbdibinder.bind('qbdi_getOptions', rword, ['pointer']),
    setOptions: _qbdibinder.bind('qbdi_setOptions', 'void', ['pointer', rword]),
    addInstrumentedRange: _qbdibinder.bind('qbdi_addInstrumentedRange', 'void', ['pointer', rword, rword]),
    addInstrumentedModule: _qbdibinder.bind('qbdi_addInstrumentedModule', 'uchar', ['pointer', 'pointer']),
    addInstrumentedModuleFromAddr: _qbdibinder.bind('qbdi_addInstrumentedModuleFromAddr', 'uchar', ['pointer', rword]),
    instrumentAllExecutableMaps: _qbdibinder.bind('qbdi_instrumentAllExecutableMaps', 'uchar', ['pointer']),
    removeInstrumentedRange: _qbdibinder.bind('qbdi_removeInstrumentedRange', 'void', ['pointer', rword, rword]),
    removeInstrumentedModule: _qbdibinder.bind('qbdi_removeInstrumentedModule', 'uchar', ['pointer', 'pointer']),
    removeInstrumentedModuleFromAddr: _qbdibinder.bind('qbdi_removeInstrumentedModuleFromAddr', 'uchar', ['pointer', rword]),
    removeAllInstrumentedRanges: _qbdibinder.bind('qbdi_removeAllInstrumentedRanges', 'void', ['pointer']),
    run: _qbdibinder.bind('qbdi_run', 'uchar', ['pointer', rword, rword]),
    call: _qbdibinder.bind('qbdi_call', 'uchar', ['pointer', 'pointer', rword, 'uint32',
        rword, rword, rword, rword, rword, rword, rword, rword, rword, rword]),
    switchStackAndCall: _qbdibinder.bind('qbdi_switchStackAndCall', 'uchar', ['pointer', 'pointer', rword, 'uint32', 'uint32',
        rword, rword, rword, rword, rword, rword, rword, rword, rword, rword]),
    getGPRState: _qbdibinder.bind('qbdi_getGPRState', 'pointer', ['pointer']),
    getFPRState: _qbdibinder.bind('qbdi_getFPRState', 'pointer', ['pointer']),
    setGPRState: _qbdibinder.bind('qbdi_setGPRState', 'void', ['pointer', 'pointer']),
    setFPRState: _qbdibinder.bind('qbdi_setFPRState', 'void', ['pointer', 'pointer']),
    addMnemonicCB: _qbdibinder.bind('qbdi_addMnemonicCB', 'uint32', ['pointer', 'pointer', 'uint32', 'pointer', 'pointer', 'int32']),
    addMemAccessCB: _qbdibinder.bind('qbdi_addMemAccessCB', 'uint32', ['pointer', 'uint32', 'pointer', 'pointer', 'int32']),
    addInstrRule: _qbdibinder.bind('qbdi_addInstrRule', 'uint32', ['pointer', 'pointer', 'uint32', 'pointer']),
    addInstrRuleRange: _qbdibinder.bind('qbdi_addInstrRuleRange', 'uint32', ['pointer', rword, rword, 'pointer', 'uint32', 'pointer']),
    addInstrRuleData: _qbdibinder.bind('qbdi_addInstrRuleData', 'void', ['pointer', 'uint32', 'pointer', 'pointer', 'int32']),
    addMemAddrCB: _qbdibinder.bind('qbdi_addMemAddrCB', 'uint32', ['pointer', rword, 'uint32', 'pointer', 'pointer']),
    addMemRangeCB: _qbdibinder.bind('qbdi_addMemRangeCB', 'uint32', ['pointer', rword, rword, 'uint32', 'pointer', 'pointer']),
    addCodeCB: _qbdibinder.bind('qbdi_addCodeCB', 'uint32', ['pointer', 'uint32', 'pointer', 'pointer', 'int32']),
    addCodeAddrCB: _qbdibinder.bind('qbdi_addCodeAddrCB', 'uint32', ['pointer', rword, 'uint32', 'pointer', 'pointer', 'int32']),
    addCodeRangeCB: _qbdibinder.bind('qbdi_addCodeRangeCB', 'uint32', ['pointer', rword, rword, 'uint32', 'pointer', 'pointer', 'int32']),
    addVMEventCB: _qbdibinder.bind('qbdi_addVMEventCB', 'uint32', ['pointer', 'uint32', 'pointer', 'pointer']),
    deleteInstrumentation: _qbdibinder.bind('qbdi_deleteInstrumentation', 'uchar', ['pointer', 'uint32']),
    deleteAllInstrumentations: _qbdibinder.bind('qbdi_deleteAllInstrumentations', 'void', ['pointer']),
    getInstAnalysis: _qbdibinder.bind('qbdi_getInstAnalysis', 'pointer', ['pointer', 'uint32']),
    getCachedInstAnalysis: _qbdibinder.bind('qbdi_getCachedInstAnalysis', 'pointer', ['pointer', rword, 'uint32']),
    recordMemoryAccess: _qbdibinder.bind('qbdi_recordMemoryAccess', 'uchar', ['pointer', 'uint32']),
    getInstMemoryAccess: _qbdibinder.bind('qbdi_getInstMemoryAccess', 'pointer', ['pointer', 'pointer']),
    getBBMemoryAccess: _qbdibinder.bind('qbdi_getBBMemoryAccess', 'pointer', ['pointer', 'pointer']),
    // Memory
    allocateVirtualStack: _qbdibinder.bind('qbdi_allocateVirtualStack', 'uchar', ['pointer', 'uint32', 'pointer']),
    alignedAlloc: _qbdibinder.bind('qbdi_alignedAlloc', 'pointer', ['uint32', 'uint32']),
    alignedFree: _qbdibinder.bind('qbdi_alignedFree', 'void', ['pointer']),
    simulateCall: _qbdibinder.bind('qbdi_simulateCall', 'void', ['pointer', rword, 'uint32',
        rword, rword, rword, rword, rword, rword, rword, rword, rword, rword]),
    getModuleNames: _qbdibinder.bind('qbdi_getModuleNames', 'pointer', ['pointer']),
    // Logs
    setLogPriority: _qbdibinder.bind('qbdi_setLogPriority', 'void', ['uint32']),
    // Helpers
    getVersion: _qbdibinder.bind('qbdi_getVersion', 'pointer', ['pointer']),
    getGPR: _qbdibinder.bind('qbdi_getGPR', rword, ['pointer', 'uint32']),
    setGPR: _qbdibinder.bind('qbdi_setGPR', 'void', ['pointer', 'uint32', rword]),
    getMemoryAccessStructDesc: _qbdibinder.bind('qbdi_getMemoryAccessStructDesc', 'pointer', []),
    getVMStateStructDesc: _qbdibinder.bind('qbdi_getVMStateStructDesc', 'pointer', []),
    getOperandAnalysisStructDesc: _qbdibinder.bind('qbdi_getOperandAnalysisStructDesc', 'pointer', []),
    getInstAnalysisStructDesc: _qbdibinder.bind('qbdi_getInstAnalysisStructDesc', 'pointer', []),
    precacheBasicBlock: _qbdibinder.bind('qbdi_precacheBasicBlock', 'uchar', ['pointer', rword]),
    clearCache: _qbdibinder.bind('qbdi_clearCache', 'void', ['pointer', rword, rword]),
    clearAllCache: _qbdibinder.bind('qbdi_clearAllCache', 'void', ['pointer']),
});
// Init some globals
if (Process.arch === 'x64') {
    var GPR_NAMES_ = ["RAX", "RBX", "RCX", "RDX", "RSI", "RDI", "R8", "R9", "R10", "R11", "R12", "R13", "R14", "R15", "RBP", "RSP", "RIP", "EFLAGS", "FS", "GS"];
    var REG_RETURN_ = "RAX";
    var REG_PC_ = "RIP";
    var REG_SP_ = "RSP";
}
else if (Process.arch === 'arm64') {
    var GPR_NAMES_ = ["X0", "X1", "X2", "X3", "X4", "X5", "X6", "X7", "X8", "X9", "X10", "X11", "X12", "X13", "X14", "X15", "X16", "X17", "X18", "X19", "X20", "X21", "X22", "X23", "X24", "X25", "X26", "X27", "X28", "FP", "LR", "SP", "NZCV", "PC"];
    var REG_RETURN_ = "X0";
    var REG_PC_ = "PC";
    var REG_SP_ = "SP";
}
else if (Process.arch === 'arm') {
    var GPR_NAMES_ = ["R0", "R1", "R2", "R3", "R4", "R5", "R6", "R7", "R8", "R9", "R10", "R11", "R12", "SP", "LR", "PC", "CPSR"];
    var REG_RETURN_ = "R0";
    var REG_PC_ = "PC";
    var REG_SP_ = "SP";
}
else if (Process.arch === 'ia32') {
    var GPR_NAMES_ = ["EAX", "EBX", "ECX", "EDX", "ESI", "EDI", "EBP", "ESP", "EIP", "EFLAGS"];
    var REG_RETURN_ = "EAX";
    var REG_PC_ = "EIP";
    var REG_SP_ = "ESP";
}
/**
 * An array holding register names.
 */
export var GPR_NAMES = GPR_NAMES_;
/**
 * A constant string representing the register carrying the return value of a function.
 */
export var REG_RETURN = REG_RETURN_;
/**
 * String of the instruction pointer register.
 */
export var REG_PC = REG_PC_;
/**
 * String of the stack pointer register.
 */
export var REG_SP = REG_SP_;
/**
 * Error return by the QBDI VM
 */
export var VMError = Object.freeze({
    /**
     * Returned event is invalid.
     */
    INVALID_EVENTID: 0xffffffff
});
/**
 * Synchronisation direction between Frida and QBDI GPR contexts
 */
export var SyncDirection = Object.freeze({
    /**
     * Constant variable used to synchronize QBDI's context to Frida's.
     *
     * .. warning:: This is currently not supported due to the lack of context updating in Frida.
     */
    QBDI_TO_FRIDA: 0,
    /**
     * Constant variable used to synchronize Frida's context to QBDI's.
     */
    FRIDA_TO_QBDI: 1
});
/**
 * The callback results.
 */
export var VMAction = Object.freeze({
    /**
     * The execution of the basic block continues.
     */
    CONTINUE: 0,
    /**
     * Available only with PREINST InstCallback.  The instruction and the
     * remained PREINST callbacks are skip. The execution continue with the
     * POSTINST instruction.
     *
     * We recommand to used this result with a low priority PREINST callback in
     * order to emulate the instruction without skipping the POSTINST callback.
     */
    SKIP_INST: 1,
    /*!*
     * Available only with InstCallback. The current instruction and the
     * reminding callback (PRE and POST) are skip. The execution continues to
     * the next instruction.
     *
     * For instruction that change the instruction pointer (jump/call/ret),
     * BREAK_TO_VM must be used insted of SKIP.
     *
     * SKIP can break the record of MemoryAccess for the current instruction.
     */
    SKIP_PATCH: 2,
    /**
     * The execution breaks and returns to the VM causing a complete
     * reevaluation of the execution state. A :js:data:`VMAction.BREAK_TO_VM` is
     * needed to ensure that modifications of the Program Counter or the program
     * code are taken into account.
     */
    BREAK_TO_VM: 3,
    /**
     * Stops the execution of the program. This causes the run function to
     * return early.
     */
    STOP: 4
});
/**
 * Position relative to an instruction.
 */
export var InstPosition = Object.freeze({
    /**
     * Positioned **before** the instruction.
     */
    PREINST: 0,
    /**
     * Positioned **after** the instruction.
     */
    POSTINST: 1
});
/**
 * Priority of callback
 */
export var CallbackPriority = Object.freeze({
    /**
     * Default priority for callback.
     */
    PRIORITY_DEFAULT: 0,
    /**
     * Maximum priority if getInstMemoryAccess is used in the callback.
     */
    PRIORITY_MEMACCESS_LIMIT: 0x1000000
});
/**
 * Events triggered by the virtual machine.
 */
export var VMEvent = Object.freeze({
    /**
     * Triggered when the execution enters a sequence.
     */
    SEQUENCE_ENTRY: 1,
    /**
     * Triggered when the execution exits from the current sequence.
     */
    SEQUENCE_EXIT: 1 << 1,
    /**
     * Triggered when the execution enters a basic block.
     */
    BASIC_BLOCK_ENTRY: 1 << 2,
    /**
     * Triggered when the execution exits from the current basic block.
     */
    BASIC_BLOCK_EXIT: 1 << 3,
    /**
     * Triggered when the execution enters a new (~unknown) basic block.
     */
    BASIC_BLOCK_NEW: 1 << 4,
    /**
     * Triggered when the ExecBroker executes an execution transfer.
     */
    EXEC_TRANSFER_CALL: 1 << 5,
    /**
     * Triggered when the ExecBroker returns from an execution transfer.
     */
    EXEC_TRANSFER_RETURN: 1 << 6,
    /**
     * Not implemented.
     */
    SYSCALL_ENTRY: 1 << 7,
    /**
     * Not implemented.
     */
    SYSCALL_EXIT: 1 << 8,
    /**
     * Not implemented.
     */
    SIGNAL: 1 << 9
});
/**
 * Memory access type (read / write / ...)
 */
export var MemoryAccessType = Object.freeze({
    /**
     * Memory read access.
     */
    MEMORY_READ: 1,
    /**
     * Memory write access.
     */
    MEMORY_WRITE: 2,
    /**
     * Memory read/write access.
     */
    MEMORY_READ_WRITE: 3
});
/**
 * Memory access flags
 */
export var MemoryAccessFlags = Object.freeze({
    /**
     * Empty flag.
     */
    MEMORY_NO_FLAGS: 0,
    /**
     * The size of the access isn't known.
     */
    MEMORY_UNKNOWN_SIZE: 1 << 0,
    /**
     * The given size is a minimum size.
     */
    MEMORY_MINIMUM_SIZE: 1 << 1,
    /**
     * The value of the access is unknown or hasn't been retrived.
     */
    MEMORY_UNKNOWN_VALUE: 1 << 2
});
/**
 * Register access type (read / write / rw)
 */
export var RegisterAccessType = Object.freeze({
    /**
     * Register is read.
     */
    REGISTER_READ: 1,
    /**
     * Register is written.
     */
    REGISTER_WRITE: 2,
    /**
     * Register is read/written.
     */
    REGISTER_READ_WRITE: 3
});
/**
 * Instruction Condition
 */
export var ConditionType = Object.freeze({
    /**
     * The instruction is unconditionnal
     */
    CONDITION_NONE: 0x0,
    /**
     * The instruction is always true
     */
    CONDITION_ALWAYS: 0x2,
    /**
     * The instruction is always false
     */
    CONDITION_NEVER: 0x3,
    /**
     * Equals ( '==' )
     */
    CONDITION_EQUALS: 0x4,
    /**
     * Not Equals ( '!=' )
     */
    CONDITION_NOT_EQUALS: 0x5,
    /**
     * Above ( '>' unsigned )
     */
    CONDITION_ABOVE: 0x6,
    /**
     * Below or Equals ( '<=' unsigned )
     */
    CONDITION_BELOW_EQUALS: 0x7,
    /**
     * Above or Equals ( '>=' unsigned )
     */
    CONDITION_ABOVE_EQUALS: 0x8,
    /**
     * Below ( '<' unsigned )
     */
    CONDITION_BELOW: 0x9,
    /**
     * Great ( '>' signed )
     */
    CONDITION_GREAT: 0xa,
    /**
     * Less or Equals ( '<=' signed )
     */
    CONDITION_LESS_EQUALS: 0xb,
    /**
     * Great or Equals ( '>=' signed )
     */
    CONDITION_GREAT_EQUALS: 0xc,
    /**
     * Less ( '<' signed )
     */
    CONDITION_LESS: 0xd,
    /**
     * Even
     */
    CONDITION_EVEN: 0xe,
    /**
     * Odd
     */
    CONDITION_ODD: 0xf,
    /**
     * Overflow
     */
    CONDITION_OVERFLOW: 0x10,
    /**
     * Not Overflow
     */
    CONDITION_NOT_OVERFLOW: 0x11,
    /**
     * Sign
     */
    CONDITION_SIGN: 0x12,
    /**
     * Not Sign
     */
    CONDITION_NOT_SIGN: 0x13
});
/**
 * Register access type (read / write / rw)
 */
export var OperandType = Object.freeze({
    /**
     * Invalid operand.
     */
    OPERAND_INVALID: 0,
    /**
     * Immediate operand.
     */
    OPERAND_IMM: 1,
    /**
     * General purpose register operand.
     */
    OPERAND_GPR: 2,
    /**
     * Predicate special operand.
     */
    OPERAND_PRED: 3,
    /**
     * Float register operand.
     */
    OPERAND_FPR: 4,
    /**
     * Segment or unsupported register operand
     */
    OPERAND_SEG: 5
});
/**
 * Operand flag
 */
export var OperandFlag = Object.freeze({
    /**
     * No flag
     */
    OPERANDFLAG_NONE: 0,
    /**
     * The operand is used to compute an address
     */
    OPERANDFLAG_ADDR: 1 << 0,
    /**
     * The value of the operand is PC relative
     */
    OPERANDFLAG_PCREL: 1 << 1,
    /**
     * The operand role isn't fully defined
     */
    OPERANDFLAG_UNDEFINED_EFFECT: 1 << 2,
    /**
     * The operand is implicit
     */
    OPERANDFLAG_IMPLICIT: 1 << 3
});
/**
 * Properties to retrieve during an instruction analysis.
 */
export var AnalysisType = Object.freeze({
    /**
     * Instruction analysis (address, mnemonic, ...).
     */
    ANALYSIS_INSTRUCTION: 1,
    /**
     * Instruction disassembly.
     */
    ANALYSIS_DISASSEMBLY: 1 << 1,
    /**
     * Instruction operands analysis.
     */
    ANALYSIS_OPERANDS: 1 << 2,
    /**
     * Instruction nearest symbol (and offset).
     */
    ANALYSIS_SYMBOL: 1 << 3
});
/**
 * QBDI VM Options
 */
export var Options = {
    /**
     * Default value
     */
    NO_OPT: 0,
    /**
     * Disable all operation on FPU (SSE, AVX, SIMD).
     * May break the execution if the target use the FPU.
     */
    OPT_DISABLE_FPR: 1 << 0,
    /**
     * Disable context switch optimisation when the target
     * execblock doesn't used FPR.
     */
    OPT_DISABLE_OPTIONAL_FPR: 1 << 1,
};
if (Process.arch === 'x64') {
    /**
     * Used the AT&T syntax for instruction disassembly (for X86 and X86_64)
     */
    Options.OPT_ATT_SYNTAX = 1 << 24;
    /**
     * Enable Backup/Restore of FS/GS segment.
     * This option uses the instructions (RD|WR)(FS|GS)BASE that must be
     * supported by the operating system.
     */
    Options.OPT_ENABLE_FS_GS = 1 << 25;
}
else if (Process.arch === 'ia32') {
    Options.OPT_ATT_SYNTAX = 1 << 24;
}
else if (Process.arch === 'arm64') {
    /**
     * Disable the emulation of the local monitor by QBDI
     */
    Options.OPT_DISABLE_LOCAL_MONITOR = 1 << 24;
    /**
     * Disable pointeur authentication
     */
    Options.OPT_BYPASS_PAUTH = 1 << 25;
    /**
     * Enable BTI on instrumented code
     */
    Options.OPT_ENABLE_BTI = 1 << 26;
}
else if (Process.arch === 'arm') {
    Options.OPT_DISABLE_LOCAL_MONITOR = 1 << 24;
    /**
     * Disable the used of D16-D31 register
     */
    Options.OPT_DISABLE_D16_D31 = 1 << 25;
    /**
     * Change between ARM and Thumb as an ARMv4 CPU
     */
    Options.OPT_ARMv4 = 3 << 26;
    /**
     * Change between ARM and Thumb as an ARMv5T or ARMv6 CPU
     */
    Options.OPT_ARMv5T_6 = 1 << 27;
    /**
     * Change between ARM and Thumb as an ARMv7 CPU (default)
     */
    Options.OPT_ARMv7 = 0;
    Options.OPT_ARM_MASK = 3 << 26;
}
Options = Object.freeze(Options);
export class InstrRuleDataCBK {
    /**
     * Object to define an :js:func:`InstCallback` in an :js:func:`InstrRuleCallback`
     *
     * @param {InstPosition} pos       Relative position of the callback (PreInst / PostInst).
     * @param {InstCallback} cbk       A **native** InstCallback returned by :js:func:`VM.newInstCallback`.
     * @param {Object}       data      User defined data passed to the callback.
     * @param {Int}          priority  The priority of the callback.
     */
    constructor(pos, cbk, data, priority = CallbackPriority.PRIORITY_DEFAULT) {
        this.position = pos;
        this.cbk = cbk;
        this.data = data;
        this.priority = priority;
    }
}
class State {
    constructor(state) {
        if (!NativePointer.prototype.isPrototypeOf(state) || state.isNull()) {
            throw new TypeError('Invalid state pointer');
        }
        this.statePtr = state;
    }
    get ptr() {
        return this.statePtr;
    }
    toRword() {
        return this.statePtr.toRword();
    }
    toString() {
        return this.statePtr.toString();
    }
}
/**
 * General Purpose Register context
 */
class GPRState extends State {
    _getGPRId(rid) {
        if (typeof (rid) === 'string') {
            rid = GPR_NAMES.indexOf(rid.toUpperCase());
        }
        if (rid < 0 || rid > GPR_NAMES.length) {
            return undefined;
        }
        return rid;
    }
    /**
     * This function is used to get the value of a specific register.
     *
     * @param {String|Number} rid Register (register name or ID can be used e.g : "RAX", "rax", 0)
     *
     * @return GPR value (ex: 0x42)
     */
    getRegister(rid) {
        var rid = this._getGPRId(rid);
        if (rid === null) {
            return undefined;
        }
        return ptr(QBDI_C.getGPR(this.ptr, rid));
    }
    /**
     * This function is used to set the value of a specific register.
     *
     * @param {String|Number} rid   Register (register name or ID can be used e.g : "RAX", "rax", 0)
     * @param {String|Number} value Register value (use **strings** for big integers)
     */
    setRegister(rid, value) {
        var rid = this._getGPRId(rid);
        if (rid !== null) {
            QBDI_C.setGPR(this.ptr, rid, value.toRword());
        }
    }
    /**
     * This function is used to get values of all registers.
     *
     * @return GPRs of current context (ex: \{"RAX":0x42, ...\})
     */
    getRegisters() {
        var regCnt = GPR_NAMES.length;
        var gprs = {};
        for (var i = 0; i < regCnt; i++) {
            gprs[GPR_NAMES[i]] = this.getRegister(i);
        }
        return gprs;
    }
    /**
     * This function is used to set values of all registers.
     *
     * @param gprs Array of register values
     */
    setRegisters(gprs) {
        var regCnt = GPR_NAMES.length;
        for (var i = 0; i < regCnt; i++) {
            this.setRegister(i, gprs[GPR_NAMES[i]]);
        }
    }
    /**
     * This function is used to synchronise a specific register between Frida and QBDI.
     *
     * .. warning:: Currently QBDI_TO_FRIDA is experimental. (E.G : RIP cannot be synchronized)
     *
     * @param                   FridaCtx   Frida context
     * @param {String|Number}   rid        Register (register name or ID can be used e.g : "RAX", "rax", 0)
     * @param {SyncDirection}   direction  Synchronization direction. (:js:data:`FRIDA_TO_QBDI` or :js:data:`QBDI_TO_FRIDA`)
     */
    synchronizeRegister(FridaCtx, rid, direction) {
        if (direction === SyncDirection.FRIDA_TO_QBDI) {
            this.setRegister(rid, FridaCtx[rid.toLowerCase()].toRword());
        }
        else { // FRIDA_TO_QBDI
            FridaCtx[rid.toLowerCase()] = ptr(this.getRegister(rid).toString());
        }
    }
    /**
     * This function is used to synchronise context between Frida and QBDI.
     *
     * .. warning:: Currently QBDI_TO_FRIDA is not implemented (due to Frida limitations).
     *
     * @param                   FridaCtx   Frida context
     * @param {SyncDirection}   direction  Synchronization direction. (:js:data:`FRIDA_TO_QBDI` or :js:data:`QBDI_TO_FRIDA`)
     */
    synchronizeContext(FridaCtx, direction) {
        for (var i in GPR_NAMES) {
            if (GPR_NAMES[i] === "EFLAGS" || GPR_NAMES[i] === "FS" || GPR_NAMES[i] === "GS") {
                continue;
            }
            this.synchronizeRegister(FridaCtx, GPR_NAMES[i], direction);
        }
        if (direction === SyncDirection.QBDI_TO_FRIDA) {
            throw new Error('Not implemented (does not really work due to Frida)');
        }
    }
    /**
     * Pretty print QBDI context.
     *
     * @param {bool} [color] Will print a colored version of the context if set.
     *
     * @return dump of all GPRs in a pretty format
     */
    pp(color) {
        var RED = color ? "\x1b[31m" : "";
        var GREEN = color ? "\x1b[32m" : "";
        var RESET = color ? "\x1b[0m" : "";
        var regCnt = GPR_NAMES.length;
        var regs = this.getRegisters();
        var line = "";
        for (var i = 0; i < regCnt; i++) {
            var name = GPR_NAMES[i];
            if (!(i % 4) && i) {
                line += '\n';
            }
            line += GREEN; // Will be overwritten by RED if necessary
            if (name === "RIP" | name === "PC") {
                line += RED;
            }
            line += name.leftPad("   ") + RESET + "=0x" + hexPointer(regs[name]) + " ";
        }
        return line;
    }
    /**
     * Pretty print and log QBDI context.
     *
     * @param {bool} [color] Will print a colored version of the context if set.
     */
    dump(color) {
        console.log(this.pp(color));
    }
    static validOrThrow(state) {
        if (!GPRState.prototype.isPrototypeOf(state)) {
            throw new TypeError('Invalid GPRState');
        }
    }
}
/**
 * Floating Point Register context
 */
class FPRState extends State {
    static validOrThrow(state) {
        if (!FPRState.prototype.isPrototypeOf(state)) {
            throw new TypeError('Invalid FPRState');
        }
    }
}
export class VM {
    /**
     * Create a new instrumentation virtual machine using "**new VM()**"
     */
    constructor() {
        // private member
        _VM_vm.set(this, null);
        _VM_memoryAccessDesc.set(this, null);
        _VM_operandAnalysisStructDesc.set(this, null);
        _VM_instAnalysisStructDesc.set(this, null);
        _VM_vmStateStructDesc.set(this, null);
        _VM_userDataPtrMap.set(this, {});
        _VM_userDataIIdMap.set(this, {});
        _VM_userDataPointer.set(this, 0);
        // Enforce a minimum QBDI version (API compatibility)
        if (!this.version || this.version.integer < QBDI_MINIMUM_VERSION) {
            throw new Error('Invalid QBDI version !');
        }
        // Create VM instance
        __classPrivateFieldSet(this, _VM_vm, this._initVM(), "f");
        // Cache various remote structure descriptions
        // Parse remote structure descriptions
        __classPrivateFieldSet(this, _VM_memoryAccessDesc, this._parseStructDesc(QBDI_C.getMemoryAccessStructDesc()), "f");
        __classPrivateFieldSet(this, _VM_operandAnalysisStructDesc, this._parseStructDesc(QBDI_C.getOperandAnalysisStructDesc()), "f");
        __classPrivateFieldSet(this, _VM_instAnalysisStructDesc, this._parseStructDesc(QBDI_C.getInstAnalysisStructDesc()), "f");
        __classPrivateFieldSet(this, _VM_vmStateStructDesc, this._parseStructDesc(QBDI_C.getVMStateStructDesc()), "f");
        // add a destructor on garbage collection
        // The name of the API change with frida 15.0.0
        if (Number(Frida.version.split(".")[0]) < 15) {
            var that = this;
            WeakRef.bind(VM, function dispose() {
                if (that.ptr !== null) {
                    that._terminateVM(that.ptr);
                }
            });
        }
        else {
            var that = this;
            Script.bindWeak(VM, function dispose() {
                if (that.ptr !== null) {
                    that._terminateVM(that.ptr);
                }
            });
        }
    }
    get ptr() {
        return __classPrivateFieldGet(this, _VM_vm, "f");
    }
    /**
     * QBDI version (major, minor, patch).
     *
     * {string:String, integer:Number, major:Number, minor:Number, patch:Number}
     */
    get version() {
        if (!QBDI_C.getVersion) {
            return undefined;
        }
        var version = {};
        var versionPtr = Memory.alloc(4);
        var vStrPtr = QBDI_C.getVersion(versionPtr);
        var vInt = Memory.readU32(versionPtr);
        version.string = Memory.readCString(vStrPtr);
        version.integer = vInt;
        version.major = (vInt >> 16) & 0xff;
        version.minor = (vInt >> 8) & 0xff;
        version.patch = vInt & 0xff;
        Object.freeze(version);
        return version;
    }
    /**
     * Get the current options of the VM
     *
     * @return  {Options}  The current option
     */
    getOptions() {
        return QBDI_C.getOptions(__classPrivateFieldGet(this, _VM_vm, "f"));
    }
    /**
     * Set the options of the VM
     *
     * @param  {Options}  options  The new options of the VM.
     */
    setOptions(options) {
        QBDI_C.setOptions(__classPrivateFieldGet(this, _VM_vm, "f"), options);
    }
    /**
     * Add an address range to the set of instrumented address ranges.
     *
     * @param {String|Number} start  Start address of the range (included).
     * @param {String|Number} end    End address of the range (excluded).
     */
    addInstrumentedRange(start, end) {
        QBDI_C.addInstrumentedRange(__classPrivateFieldGet(this, _VM_vm, "f"), start.toRword(), end.toRword());
    }
    /**
     * Add the executable address ranges of a module to the set of instrumented address ranges.
     *
     * @param  {String} name   The module's name.
     *
     * @return {bool} True if at least one range was added to the instrumented ranges.
     */
    addInstrumentedModule(name) {
        var namePtr = Memory.allocUtf8String(name);
        return QBDI_C.addInstrumentedModule(__classPrivateFieldGet(this, _VM_vm, "f"), namePtr) == true;
    }
    /**
     * Add the executable address ranges of a module to the set of instrumented address ranges. using an address belonging to the module.
     *
     * @param  {String|Number} addr An address contained by module's range.
     *
     * @return {bool} True if at least one range was removed from the instrumented ranges.
     */
    addInstrumentedModuleFromAddr(addr) {
        return QBDI_C.addInstrumentedModuleFromAddr(__classPrivateFieldGet(this, _VM_vm, "f"), addr.toRword()) == true;
    }
    /**
     * Adds all the executable memory maps to the instrumented range set.
     *
     * @return {bool} True if at least one range was added to the instrumented ranges.
     */
    instrumentAllExecutableMaps() {
        return QBDI_C.instrumentAllExecutableMaps(__classPrivateFieldGet(this, _VM_vm, "f")) == true;
    }
    /**
     * Remove an address range from the set of instrumented address ranges.
     *
     * @param {String|Number} start  Start address of the range (included).
     * @param {String|Number} end    End address of the range (excluded).
     */
    removeInstrumentedRange(start, end) {
        QBDI_C.removeInstrumentedRange(__classPrivateFieldGet(this, _VM_vm, "f"), start.toRword(), end.toRword());
    }
    /**
     * Remove the executable address ranges of a module from the set of instrumented address ranges.
     *
     * @param {String} name   The module's name.
     *
     * @return {bool} True if at least one range was added to the instrumented ranges.
     */
    removeInstrumentedModule(name) {
        var namePtr = Memory.allocUtf8String(name);
        return QBDI_C.removeInstrumentedModule(__classPrivateFieldGet(this, _VM_vm, "f"), namePtr) == true;
    }
    /**
     * Remove the executable address ranges of a module from the set of instrumented address ranges using an address belonging to the module.
     *
     * @param {String|Number} addr: An address contained by module's range.
     *
     * @return {bool} True if at least one range was added to the instrumented ranges.
     */
    removeInstrumentedModuleFromAddr(addr) {
        return QBDI_C.removeInstrumentedModuleFromAddr(__classPrivateFieldGet(this, _VM_vm, "f"), addr.toRword()) == true;
    }
    /**
     * Remove all instrumented ranges.
     */
    removeAllInstrumentedRanges() {
        QBDI_C.removeAllInstrumentedRanges(__classPrivateFieldGet(this, _VM_vm, "f"));
    }
    /**
     * Start the execution by the DBI from a given address (and stop when another is reached).
     *
     * @param {String|Number} start  Address of the first instruction to execute.
     * @param {String|Number} stop   Stop the execution when this instruction is reached.
     *
     * @return {bool} True if at least one block has been executed.
     */
    run(start, stop) {
        return QBDI_C.run(__classPrivateFieldGet(this, _VM_vm, "f"), start.toRword(), stop.toRword()) == true;
    }
    /**
     * Obtain the current general register state.
     *
     * @return {GPRState} An object containing the General Purpose Registers state.
     */
    getGPRState() {
        return new GPRState(QBDI_C.getGPRState(__classPrivateFieldGet(this, _VM_vm, "f")));
    }
    /**
     * Obtain the current floating point register state.
     *
     * @return {FPRState} An object containing the Floating point Purpose Registers state.
     */
    getFPRState() {
        return new FPRState(QBDI_C.getFPRState(__classPrivateFieldGet(this, _VM_vm, "f")));
    }
    /**
     * Set the GPR state
     *
     * @param {GPRState} state  Array of register values
     */
    setGPRState(state) {
        GPRState.validOrThrow(state);
        QBDI_C.setGPRState(__classPrivateFieldGet(this, _VM_vm, "f"), state.ptr);
    }
    /**
     * Set the FPR state
     *
     * @param {FPRState} state  Array of register values
     */
    setFPRState(state) {
        FPRState.validOrThrow(state);
        QBDI_C.setFPRState(__classPrivateFieldGet(this, _VM_vm, "f"), state.ptr);
    }
    /**
     * Pre-cache a known basic block.
     *
     * @param {String|Number} pc  Start address of a basic block
     *
     * @return {bool} True if basic block has been inserted in cache.
     */
    precacheBasicBlock(pc) {
        return QBDI_C.precacheBasicBlock(__classPrivateFieldGet(this, _VM_vm, "f"), pc) == true;
    }
    /**
     * Clear a specific address range from the translation cache.
     *
     * @param {String|Number}  start  Start of the address range to clear from the cache.
     * @param {String|Number}  end    End of the address range to clear from the cache.
     */
    clearCache(start, end) {
        QBDI_C.clearCache(__classPrivateFieldGet(this, _VM_vm, "f"), start, end);
    }
    /**
     * Clear the entire translation cache.
     */
    clearAllCache() {
        QBDI_C.clearAllCache(__classPrivateFieldGet(this, _VM_vm, "f"));
    }
    /**
     * Register a callback event if the instruction matches the mnemonic.
     *
     * @param {String}       mnem      Mnemonic to match.
     * @param {InstPosition} pos       Relative position of the callback (PreInst / PostInst).
     * @param {InstCallback} cbk       A **native** InstCallback returned by :js:func:`VM.newInstCallback`.
     * @param {Object}       data      User defined data passed to the callback.
     * @param {Int}          priority  The priority of the callback.
     *
     * @return {Number} The id of the registered instrumentation (or VMError.INVALID_EVENTID in case of failure).
     */
    addMnemonicCB(mnem, pos, cbk, data, priority = CallbackPriority.PRIORITY_DEFAULT) {
        var mnemPtr = Memory.allocUtf8String(mnem);
        var vm = __classPrivateFieldGet(this, _VM_vm, "f");
        return this._retainUserData(data, function (dataPtr) {
            return QBDI_C.addMnemonicCB(vm, mnemPtr, pos, cbk, dataPtr, priority);
        });
    }
    /**
     * Register a callback event for every memory access matching the type bitfield made by the instruction in the range codeStart to codeEnd.
     *
     * @param {MemoryAccessType} type      A mode bitfield: either MEMORY_READ, MEMORY_WRITE or both (MEMORY_READ_WRITE).
     * @param {InstCallback}     cbk       A **native** InstCallback returned by :js:func:`VM.newInstCallback`.
     * @param {Object}           data      User defined data passed to the callback.
     * @param {Int}              priority  The priority of the callback.
     *
     * @return {Number} The id of the registered instrumentation (or VMError.INVALID_EVENTID in case of failure).
     */
    addMemAccessCB(type, cbk, data, priority = CallbackPriority.PRIORITY_DEFAULT) {
        var vm = __classPrivateFieldGet(this, _VM_vm, "f");
        return this._retainUserData(data, function (dataPtr) {
            return QBDI_C.addMemAccessCB(vm, type, cbk, dataPtr, priority);
        });
    }
    /**
     * Add a custom instrumentation rule to the VM.
     *
     * @param {InstrRuleCallback}  cbk    A **native** InstrRuleCallback returned by :js:func:`VM.newInstrRuleCallback`.
     * @param {AnalysisType}       type   Analyse type needed for this instruction function pointer to the callback
     * @param {Object}             data   User defined data passed to the callback.
     *
     * @return {Number} The id of the registered instrumentation (or VMError.INVALID_EVENTID in case of failure).
     */
    addInstrRule(cbk, type, data) {
        var vm = __classPrivateFieldGet(this, _VM_vm, "f");
        return this._retainUserDataForInstrRuleCB(data, function (dataPtr) {
            return QBDI_C.addInstrRule(vm, cbk, type, dataPtr);
        });
    }
    /**
     * Add a custom instrumentation rule to the VM for a range of address.
     *
     * @param {String|Number}      start  Begin of the range of address where apply the rule
     * @param {String|Number}      end    End of the range of address where apply the rule
     * @param {InstrRuleCallback}  cbk    A **native** InstrRuleCallback returned by :js:func:`VM.newInstrRuleCallback`.
     * @param {AnalysisType}       type   Analyse type needed for this instruction function pointer to the callback
     * @param {Object}             data   User defined data passed to the callback.
     *
     * @return {Number} The id of the registered instrumentation (or VMError.INVALID_EVENTID in case of failure).
     */
    addInstrRuleRange(start, end, cbk, type, data) {
        var vm = __classPrivateFieldGet(this, _VM_vm, "f");
        return this._retainUserDataForInstrRuleCB(data, function (dataPtr) {
            return QBDI_C.addInstrRuleRange(vm, start.toRword(), end.toRword(), cbk, type, dataPtr);
        });
    }
    /**
     * Add a virtual callback which is triggered for any memory access at a specific address matching the access type.
     * Virtual callbacks are called via callback forwarding by a gate callback triggered on every memory access. This incurs a high performance cost.
     *
     * @param {String|Number}     addr   Code address which will trigger the callback.
     * @param {MemoryAccessType}  type   A mode bitfield: either MEMORY_READ, MEMORY_WRITE or both (MEMORY_READ_WRITE).
     * @param {InstCallback}      cbk    A **native** InstCallback returned by :js:func:`VM.newInstCallback`.
     * @param {Object}            data   User defined data passed to the callback.
     *
     * @return {Number} The id of the registered instrumentation (or VMError.INVALID_EVENTID in case of failure).
     */
    addMemAddrCB(addr, type, cbk, data) {
        var vm = __classPrivateFieldGet(this, _VM_vm, "f");
        return this._retainUserData(data, function (dataPtr) {
            return QBDI_C.addMemAddrCB(vm, addr.toRword(), type, cbk, dataPtr);
        });
    }
    /**
     * Add a virtual callback which is triggered for any memory access in a specific address range matching the access type.
     * Virtual callbacks are called via callback forwarding by a gate callback triggered on every memory access. This incurs a high performance cost.
     *
     * @param {String|Number}     start    Start of the address range which will trigger the callback.
     * @param {String|Number}     end      End of the address range which will trigger the callback.
     * @param {MemoryAccessType}  type     A mode bitfield: either MEMORY_READ, MEMORY_WRITE or both (MEMORY_READ_WRITE).
     * @param {InstCallback}      cbk      A **native** InstCallback returned by :js:func:`VM.newInstCallback`.
     * @param {Object}            data     User defined data passed to the callback.
     *
     * @return {Number} The id of the registered instrumentation (or VMError.INVALID_EVENTID in case of failure).
     */
    addMemRangeCB(start, end, type, cbk, data) {
        var vm = __classPrivateFieldGet(this, _VM_vm, "f");
        return this._retainUserData(data, function (dataPtr) {
            return QBDI_C.addMemRangeCB(vm, start.toRword(), end.toRword(), type, cbk, dataPtr);
        });
    }
    /**
     * Register a callback event for a specific instruction event.
     *
     * @param {InstPosition} pos       Relative position of the callback (PreInst / PostInst).
     * @param {InstCallback} cbk       A **native** InstCallback returned by :js:func:`VM.newInstCallback`.
     * @param {Object}       data      User defined data passed to the callback.
     * @param {Int}          priority  The priority of the callback.
     *
     * @return {Number} The id of the registered instrumentation (or VMError.INVALID_EVENTID in case of failure).
     */
    addCodeCB(pos, cbk, data, priority = CallbackPriority.PRIORITY_DEFAULT) {
        var vm = __classPrivateFieldGet(this, _VM_vm, "f");
        return this._retainUserData(data, function (dataPtr) {
            return QBDI_C.addCodeCB(vm, pos, cbk, dataPtr, priority);
        });
    }
    /**
     * Register a callback for when a specific address is executed.
     *
     * @param {String|Number} addr      Code address which will trigger the callback.
     * @param {InstPosition}  pos       Relative position of the callback (PreInst / PostInst).
     * @param {InstCallback}  cbk       A **native** InstCallback returned by :js:func:`VM.newInstCallback`.
     * @param {Object}        data      User defined data passed to the callback.
     * @param {Int}           priority  The priority of the callback.
     *
     * @return {Number} The id of the registered instrumentation (or VMError.INVALID_EVENTID in case of failure).
     */
    addCodeAddrCB(addr, pos, cbk, data, priority = CallbackPriority.PRIORITY_DEFAULT) {
        var vm = __classPrivateFieldGet(this, _VM_vm, "f");
        return this._retainUserData(data, function (dataPtr) {
            return QBDI_C.addCodeAddrCB(vm, addr.toRword(), pos, cbk, dataPtr, priority);
        });
    }
    /**
     * Register a callback for when a specific address range is executed.
     *
     * @param {String|Number} start     Start of the address range which will trigger the callback.
     * @param {String|Number} end       End of the address range which will trigger the callback.
     * @param {InstPosition}  pos       Relative position of the callback (PreInst / PostInst).
     * @param {InstCallback}  cbk       A **native** InstCallback returned by :js:func:`VM.newInstCallback`.
     * @param {Object}        data      User defined data passed to the callback.
     * @param {Int}           priority  The priority of the callback.
     *
     * @return {Number} The id of the registered instrumentation (or VMError.INVALID_EVENTID in case of failure).
     */
    addCodeRangeCB(start, end, pos, cbk, data, priority = CallbackPriority.PRIORITY_DEFAULT) {
        var vm = __classPrivateFieldGet(this, _VM_vm, "f");
        return this._retainUserData(data, function (dataPtr) {
            return QBDI_C.addCodeRangeCB(vm, start.toRword(), end.toRword(), pos, cbk, dataPtr, priority);
        });
    }
    /**
     * Register a callback event for a specific VM event.
     *
     * @param {VMEvent}    mask   A mask of VM event type which will trigger the callback.
     * @param {VMCallback} cbk    A **native** VMCallback returned by :js:func:`VM.newVMCallback`.
     * @param {Object}     data   User defined data passed to the callback.
     *
     * @return {Number} The id of the registered instrumentation (or VMError.INVALID_EVENTID in case of failure).
     */
    addVMEventCB(mask, cbk, data) {
        var vm = __classPrivateFieldGet(this, _VM_vm, "f");
        return this._retainUserData(data, function (dataPtr) {
            return QBDI_C.addVMEventCB(vm, mask, cbk, dataPtr);
        });
    }
    /**
     * Remove an instrumentation.
     *
     * @param   {Number} id   The id of the instrumentation to remove.
     * @return  {bool} True if instrumentation has been removed.
     */
    deleteInstrumentation(id) {
        this._releaseUserData(id);
        return QBDI_C.deleteInstrumentation(__classPrivateFieldGet(this, _VM_vm, "f"), id) == true;
    }
    /**
     * Remove all the registered instrumentations.
     */
    deleteAllInstrumentations() {
        this._releaseAllUserData();
        QBDI_C.deleteAllInstrumentations(__classPrivateFieldGet(this, _VM_vm, "f"));
    }
    /**
     * Obtain the analysis of the current instruction. Analysis results are cached in the VM.
     * The validity of the returned pointer is only guaranteed until the end of the callback, else a deepcopy of the structure is required.
     *
     * @param {AnalysisType} [type] Properties to retrieve during analysis (default to ANALYSIS_INSTRUCTION | ANALYSIS_DISASSEMBLY).
     *
     * @return {InstAnalysis} A :js:class:`InstAnalysis` object containing the analysis result.
     */
    getInstAnalysis(type) {
        type = type || (AnalysisType.ANALYSIS_INSTRUCTION | AnalysisType.ANALYSIS_DISASSEMBLY);
        var analysis = QBDI_C.getInstAnalysis(__classPrivateFieldGet(this, _VM_vm, "f"), type);
        if (analysis.isNull()) {
            return NULL;
        }
        return this._parseInstAnalysis(analysis);
    }
    /**
     * Obtain the analysis of a cached instruction. Analysis results are cached in the VM.
     * The validity of the returned pointer is only guaranteed until the end of the callback, else a deepcopy of the structure is required.
     *
     * @param {String|Number} addr    The address of the instruction to analyse.
     * @param {AnalysisType}  [type]  Properties to retrieve during analysis (default to ANALYSIS_INSTRUCTION | ANALYSIS_DISASSEMBLY).
     *
     * @return {InstAnalysis} A :js:class:`InstAnalysis` object containing the analysis result. null if the instruction isn't in the cache.
     */
    getCachedInstAnalysis(addr, type) {
        type = type || (AnalysisType.ANALYSIS_INSTRUCTION | AnalysisType.ANALYSIS_DISASSEMBLY);
        var analysis = QBDI_C.getCachedInstAnalysis(__classPrivateFieldGet(this, _VM_vm, "f"), addr.toRword(), type);
        if (analysis.isNull()) {
            return NULL;
        }
        return this._parseInstAnalysis(analysis);
    }
    /**
     * Obtain the memory accesses made by the last executed instruction. Return NULL and a size of 0 if the instruction made no memory access.
     *
     * @param {MemoryAccessType} type Memory mode bitfield to activate the logging for: either MEMORY_READ, MEMORY_WRITE or both (MEMORY_READ_WRITE).
     */
    recordMemoryAccess(type) {
        return QBDI_C.recordMemoryAccess(__classPrivateFieldGet(this, _VM_vm, "f"), type) == true;
    }
    /**
     * Obtain the memory accesses made by the last executed instruction. Return NULL and a size of 0 if the instruction made no memory access.
     *
     * @return {MemoryAccess[]} An array of :js:class:`MemoryAccess` made by the instruction.
     */
    getInstMemoryAccess() {
        return this._getMemoryAccess(QBDI_C.getInstMemoryAccess);
    }
    /**
     * Obtain the memory accesses made by the last executed sequence. Return NULL and a size of 0 if the basic block made no memory access.
     *
     * @return {MemoryAccess[]} An array of :js:class:`MemoryAccess` made by the sequence.
     */
    getBBMemoryAccess() {
        return this._getMemoryAccess(QBDI_C.getBBMemoryAccess);
    }
    // Memory
    /**
     * Allocate a new stack and setup the GPRState accordingly. The allocated stack needs to be freed with alignedFree().
     *
     * @param {GPRState} state      Array of register values
     * @param {Number}   stackSize  Size of the stack to be allocated.
     *
     * @return  Pointer (rword) to the allocated memory or NULL in case an error was encountered.
     */
    allocateVirtualStack(state, stackSize) {
        GPRState.validOrThrow(state);
        var stackPtr = Memory.alloc(Process.pointerSize);
        var ret = QBDI_C.allocateVirtualStack(state.ptr, stackSize, stackPtr);
        if (ret == false) {
            return NULL;
        }
        return Memory.readPointer(stackPtr);
    }
    /**
     * Allocate a block of memory of a specified sized with an aligned base address.
     *
     * @param {Number} size   Allocation size in bytes.
     * @param {Number} align  Base address alignement in bytes.
     *
     * @return  Pointer (rword) to the allocated memory or NULL in case an error was encountered.
     */
    alignedAlloc(size, align) {
        return QBDI_C.alignedAlloc(size, align);
    }
    /**
     * Free a block of aligned memory allocated with alignedAlloc or allocateVirtualStack
     *
     * @param {NativePtr} ptr  Pointer to the allocated memory.
     */
    alignedFree(ptr) {
        QBDI_C.alignedFree(ptr);
    }
    /**
     * Simulate a call by modifying the stack and registers accordingly.
     *
     * @param {GPRState}                state     Array of register values
     * @param {String|Number}           retAddr   Return address of the call to simulate.
     * @param {StringArray|NumberArray} args      A variadic list of arguments.
     */
    simulateCall(state, retAddr, args) {
        GPRState.validOrThrow(state);
        retAddr = retAddr.toRword();
        var fargs = this._formatVAArgs(args);
        // Use this weird construction to work around a bug in the duktape runtime
        var _simulateCall = function (a, b, c, d, e, f, g, h, i, j) {
            QBDI_C.simulateCall(state.ptr, retAddr, fargs[0], a, b, c, d, e, f, g, h, i, j);
        };
        _simulateCall.apply(null, fargs[1]);
    }
    /**
     * Use QBDI engine to retrieve loaded modules.
     *
     * @return list of module names (ex: ["ls", "libc", "libz"])
     */
    getModuleNames() {
        var sizePtr = Memory.alloc(4);
        var modsPtr = QBDI_C.getModuleNames(sizePtr);
        var size = Memory.readU32(sizePtr);
        if (modsPtr.isNull() || size === 0) {
            return [];
        }
        var mods = [];
        var p = modsPtr;
        for (var i = 0; i < size; i++) {
            var strPtr = Memory.readPointer(p);
            var str = Memory.readCString(strPtr);
            mods.push(str);
            System.free(strPtr);
            p = p.add(Process.pointerSize);
        }
        System.free(modsPtr);
        return mods;
    }
    // Logs
    setLogPriority(priority) {
        QBDI_C.setLogPriority(priority);
    }
    // Helpers
    /**
     * Create a native **Instruction rule callback** from a JS function.
     *
     * Example:
     *       >>> var icbk = vm.newInstrRuleCallback(function(vm, ana, data) {
     *       >>>   console.log("0x" + ana.address.toString(16) + " " + ana.disassembly);
     *       >>>   return [new InstrRuleDataCBK(InstPosition.POSTINST, printCB, ana.disassembly)];
     *       >>> });
     *
     * @param {InstrRuleCallback} cbk an instruction callback (ex: function(vm, ana, data) {};)
     *
     * @return an native InstrRuleCallback
     */
    newInstrRuleCallback(cbk) {
        if (typeof (cbk) !== 'function' || cbk.length !== 3) {
            return undefined;
        }
        // Use a closure to provide object
        var vm = this;
        var jcbk = function (vmPtr, anaPtr, cbksPtr, dataPtr) {
            var ana = vm._parseInstAnalysis(anaPtr);
            var data = vm._getUserData(dataPtr);
            var res = cbk(vm, ana, data.userdata);
            if (res === null) {
                return;
            }
            if (!Array.isArray(res)) {
                throw new TypeError('Invalid InstrRuleDataCBK Array');
            }
            if (res.length === 0) {
                return;
            }
            for (var i = 0; i < res.length; i++) {
                var d = vm._retainUserDataForInstrRuleCB2(res[i].data, data.id);
                QBDI_C.addInstrRuleData(cbksPtr, res[i].position, res[i].cbk, d, res[i].priority);
            }
        };
        return new NativeCallback(jcbk, 'void', ['pointer', 'pointer', 'pointer', 'pointer']);
    }
    /**
     * Create a native **Instruction callback** from a JS function.
     *
     * Example:
     *       >>> var icbk = vm.newInstCallback(function(vm, gpr, fpr, data) {
     *       >>>   inst = vm.getInstAnalysis();
     *       >>>   console.log("0x" + inst.address.toString(16) + " " + inst.disassembly);
     *       >>>   return VMAction.CONTINUE;
     *       >>> });
     *
     * @param {InstCallback} cbk an instruction callback (ex: function(vm, gpr, fpr, data) {};)
     *
     * @return an native InstCallback
     */
    newInstCallback(cbk) {
        if (typeof (cbk) !== 'function' || cbk.length !== 4) {
            return undefined;
        }
        // Use a closure to provide object
        var vm = this;
        var jcbk = function (vmPtr, gprPtr, fprPtr, dataPtr) {
            var gpr = new GPRState(gprPtr);
            var fpr = new FPRState(fprPtr);
            var data = vm._getUserData(dataPtr);
            return cbk(vm, gpr, fpr, data);
        };
        return new NativeCallback(jcbk, 'int', ['pointer', 'pointer', 'pointer', 'pointer']);
    }
    /**
     * Create a native **VM callback** from a JS function.
     *
     * Example:
     *       >>> var vcbk = vm.newVMCallback(function(vm, evt, gpr, fpr, data) {
     *       >>>   if (evt.event & VMEvent.EXEC_TRANSFER_CALL) {
     *       >>>     console.warn("[!] External call to 0x" + evt.basicBlockStart.toString(16));
     *       >>>   }
     *       >>>   return VMAction.CONTINUE;
     *       >>> });
     *
     * @param {VMCallback} cbk a VM callback (ex: function(vm, state, gpr, fpr, data) {};)
     *
     * @return a native VMCallback
     */
    newVMCallback(cbk) {
        if (typeof (cbk) !== 'function' || cbk.length !== 5) {
            return undefined;
        }
        // Use a closure to provide object and a parsed event
        var vm = this;
        var jcbk = function (vmPtr, state, gprPtr, fprPtr, dataPtr) {
            var s = vm._parseVMState(state);
            var gpr = new GPRState(gprPtr);
            var fpr = new FPRState(fprPtr);
            var data = vm._getUserData(dataPtr);
            return cbk(vm, s, gpr, fpr, data);
        };
        return new NativeCallback(jcbk, 'int', ['pointer', 'pointer', 'pointer', 'pointer', 'pointer']);
    }
    /**
     * Call a function by its address (or through a Frida ``NativePointer``).
     *
     * Arguments can be provided, but their types need to be compatible
     * with the ``.toRword()`` interface (like ``NativePointer`` or ``UInt64``).
     *
     * Example:
     *       >>> var vm = new VM();
     *       >>> var state = vm.getGPRState();
     *       >>> var stackTopPtr = vm.allocateVirtualStack(state, 0x1000000);
     *       >>> var aFunction = Module.findExportByName(null, "Secret");
     *       >>> vm.addInstrumentedModuleFromAddr(aFunction);
     *       >>> vm.call(aFunction, [42]);
     *       >>> vm.alignedFree(stackTopPtr);
     *
     * @param {String|Number}           address function address (or Frida ``NativePointer``).
     * @param {StringArray|NumberArray} [args]  optional list of arguments
     */
    call(address, args) {
        address = address.toRword();
        var fargs = this._formatVAArgs(args);
        var vm = __classPrivateFieldGet(this, _VM_vm, "f");
        // Use this weird construction to work around a bug in the duktape runtime
        var _call = function (a, b, c, d, e, f, g, h, i, j) {
            var retPtr = Memory.alloc(Process.pointerSize);
            var res = QBDI_C.call(vm, retPtr, address, fargs[0], a, b, c, d, e, f, g, h, i, j);
            if (res == false) {
                throw new EvalError('Execution failed');
            }
            return ptr(Memory.readRword(retPtr));
        };
        return _call.apply(null, fargs[1]);
    }
    /**
     * Call a function by its address (or through a Frida ``NativePointer``).
     * QBDI will allocate his one stack to run, while the instrumented code will
     * use the top of the current stack.
     *
     * Arguments can be provided, but their types need to be compatible
     * with the ``.toRword()`` interface (like ``NativePointer`` or ``UInt64``).
     *
     * Example:
     *       >>> var vm = new VM();
     *       >>> var state = vm.getGPRState();
     *       >>> var aFunction = Module.findExportByName(null, "Secret");
     *       >>> vm.addInstrumentedModuleFromAddr(aFunction);
     *       >>> vm.switchStackAndCall(aFunction, [42]);
     *
     * @param {String|Number}           address function address (or Frida ``NativePointer``).
     * @param {StringArray|NumberArray} [args]  optional list of arguments
     * @param {String|Number}           stack size for the engine.
     */
    switchStackAndCall(address, args, stackSize) {
        if (stackSize === null || stackSize === undefined) {
            stackSize = 0x20000;
        }
        address = address.toRword();
        var fargs = this._formatVAArgs(args);
        var vm = __classPrivateFieldGet(this, _VM_vm, "f");
        // Use this weird construction to work around a bug in the duktape runtime
        var _scall = function (a, b, c, d, e, f, g, h, i, j) {
            var retPtr = Memory.alloc(Process.pointerSize);
            var res = QBDI_C.switchStackAndCall(vm, retPtr, address, stackSize, fargs[0], a, b, c, d, e, f, g, h, i, j);
            if (res == false) {
                throw new EvalError('Execution failed');
            }
            return ptr(Memory.readRword(retPtr));
        };
        return _scall.apply(null, fargs[1]);
    }
    ////////////////////
    // private method //
    ////////////////////
    _parseStructDesc(ptr) {
        var desc = {};
        desc.size = Memory.readU32(ptr);
        ptr = ptr.add(4);
        desc.items = Memory.readU32(ptr);
        ptr = ptr.add(4);
        desc.offsets = [];
        for (var i = 0; i < desc.items; i++) {
            var offset = Memory.readU32(ptr);
            ptr = ptr.add(4);
            desc.offsets.push(offset);
        }
        Object.freeze(desc);
        return desc;
    }
    _initVM() {
        var vmPtr = Memory.alloc(Process.pointerSize);
        QBDI_C.initVM(vmPtr, NULL, NULL, 0);
        return Memory.readPointer(vmPtr);
    }
    _terminateVM(v) {
        QBDI_C.terminateVM(v);
    }
    // Retain (~reference) a user data object when an instrumentation is added.
    //
    // If a ``NativePointer`` is given, it will be used as raw user data and the
    // object will not be retained.
    _retainUserData(data, fn) {
        var dataPtr = ptr("0");
        var managed = false;
        if (data !== null && data !== undefined) {
            __classPrivateFieldSet(this, _VM_userDataPointer, __classPrivateFieldGet(this, _VM_userDataPointer, "f") + 1, "f");
            dataPtr = dataPtr.add(__classPrivateFieldGet(this, _VM_userDataPointer, "f"));
            managed = true;
        }
        var iid = fn(dataPtr);
        if (managed) {
            __classPrivateFieldGet(this, _VM_userDataPtrMap, "f")[dataPtr] = data;
            __classPrivateFieldGet(this, _VM_userDataIIdMap, "f")[iid] = dataPtr;
        }
        return iid;
    }
    _retainUserDataForInstrRuleCB(data, fn) {
        __classPrivateFieldSet(this, _VM_userDataPointer, __classPrivateFieldGet(this, _VM_userDataPointer, "f") + 1, "f");
        var dataPtr = ptr("0").add(__classPrivateFieldGet(this, _VM_userDataPointer, "f"));
        var iid = fn(dataPtr);
        __classPrivateFieldGet(this, _VM_userDataPtrMap, "f")[dataPtr] = { userdata: data, id: iid };
        __classPrivateFieldGet(this, _VM_userDataIIdMap, "f")[iid] = [dataPtr];
        return iid;
    }
    _retainUserDataForInstrRuleCB2(data, id) {
        if (data !== null && data !== undefined) {
            __classPrivateFieldSet(this, _VM_userDataPointer, __classPrivateFieldGet(this, _VM_userDataPointer, "f") + 1, "f");
            var dataPtr = ptr("0").add(__classPrivateFieldGet(this, _VM_userDataPointer, "f"));
            __classPrivateFieldGet(this, _VM_userDataPtrMap, "f")[dataPtr] = data;
            __classPrivateFieldGet(this, _VM_userDataIIdMap, "f")[id].push(dataPtr);
            return dataPtr;
        }
        else {
            return ptr("0");
        }
    }
    // Retrieve a user data object from its ``NativePointer`` reference.
    // If pointer is NULL or no data object is found, the ``NativePointer``
    // object will be returned.
    _getUserData(dataPtr) {
        var data = dataPtr;
        if (!data.isNull()) {
            var d = __classPrivateFieldGet(this, _VM_userDataPtrMap, "f")[dataPtr];
            if (d !== undefined) {
                return d;
            }
        }
        return undefined;
    }
    // Release references to a user data object using the correponding
    // instrumentation id.
    _releaseUserData(id) {
        var dataPtr = __classPrivateFieldGet(this, _VM_userDataIIdMap, "f")[id];
        if (dataPtr !== undefined) {
            if (Array.isArray(dataPtr)) {
                for (var i = 0; i < dataPtr.length; i++) {
                    delete __classPrivateFieldGet(this, _VM_userDataPtrMap, "f")[dataPtr[i]];
                }
            }
            else {
                delete __classPrivateFieldGet(this, _VM_userDataPtrMap, "f")[dataPtr];
            }
            delete __classPrivateFieldGet(this, _VM_userDataIIdMap, "f")[id];
        }
    }
    // Release all references to user data objects.
    _releaseAllUserData() {
        __classPrivateFieldSet(this, _VM_userDataPtrMap, {}, "f");
        __classPrivateFieldSet(this, _VM_userDataIIdMap, {}, "f");
        __classPrivateFieldSet(this, _VM_userDataPointer, 0, "f");
    }
    _formatVAArgs(args) {
        if (args === undefined) {
            args = [];
        }
        var argsCnt = args.length;
        // We are limited to 10 arguments for now
        var fargs = new Array(10);
        var fargsCnt = fargs.length;
        for (var i = 0; i < fargsCnt; i++) {
            if (i < argsCnt) {
                fargs[i] = args[i].toRword();
            }
            else {
                fargs[i] = 0;
            }
        }
        return [argsCnt, fargs];
    }
    _parseMemoryAccess(ptr) {
        var access = {};
        var p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[0]);
        access.instAddress = Memory.readRword(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_memoryAccessDesc, "f").offsets[1]);
        access.accessAddress = Memory.readRword(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_memoryAccessDesc, "f").offsets[2]);
        access.value = Memory.readRword(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_memoryAccessDesc, "f").offsets[3]);
        access.size = Memory.readU16(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_memoryAccessDesc, "f").offsets[4]);
        access.type = Memory.readU8(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_memoryAccessDesc, "f").offsets[5]);
        access.flags = Memory.readU8(p);
        Object.freeze(access);
        return access;
    }
    _getMemoryAccess(f) {
        var accesses = [];
        var sizePtr = Memory.alloc(4);
        var accessPtr = f(__classPrivateFieldGet(this, _VM_vm, "f"), sizePtr);
        if (accessPtr.isNull()) {
            return [];
        }
        var cnt = Memory.readU32(sizePtr);
        var sSize = __classPrivateFieldGet(this, _VM_memoryAccessDesc, "f").size;
        var p = accessPtr;
        for (var i = 0; i < cnt; i++) {
            var access = this._parseMemoryAccess(p);
            accesses.push(access);
            p = p.add(sSize);
        }
        System.free(accessPtr);
        return accesses;
    }
    _parseVMState(ptr) {
        var state = {};
        var p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[0]);
        state.event = Memory.readU8(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_vmStateStructDesc, "f").offsets[1]);
        state.sequenceStart = Memory.readRword(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_vmStateStructDesc, "f").offsets[2]);
        state.sequenceEnd = Memory.readRword(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_vmStateStructDesc, "f").offsets[3]);
        state.basicBlockStart = Memory.readRword(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_vmStateStructDesc, "f").offsets[4]);
        state.basicBlockEnd = Memory.readRword(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_vmStateStructDesc, "f").offsets[5]);
        state.lastSignal = Memory.readRword(p);
        Object.freeze(state);
        return state;
    }
    _parseOperandAnalysis(ptr) {
        var analysis = {};
        var p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[0]);
        analysis.type = Memory.readU32(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_operandAnalysisStructDesc, "f").offsets[1]);
        analysis.flag = Memory.readU8(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_operandAnalysisStructDesc, "f").offsets[2]);
        analysis.value = Memory.readRword(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_operandAnalysisStructDesc, "f").offsets[3]);
        analysis.size = Memory.readU8(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_operandAnalysisStructDesc, "f").offsets[4]);
        analysis.regOff = Memory.readU8(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_operandAnalysisStructDesc, "f").offsets[5]);
        analysis.regCtxIdx = Memory.readS16(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_operandAnalysisStructDesc, "f").offsets[6]);
        var regNamePtr = Memory.readPointer(p);
        if (regNamePtr.isNull()) {
            analysis.regName = undefined;
        }
        else {
            analysis.regName = Memory.readCString(regNamePtr);
        }
        p = ptr.add(__classPrivateFieldGet(this, _VM_operandAnalysisStructDesc, "f").offsets[7]);
        analysis.regAccess = Memory.readU8(p);
        Object.freeze(analysis);
        return analysis;
    }
    _parseInstAnalysis(ptr) {
        var analysis = {};
        var p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[0]);
        analysis.mnemonic = Memory.readCString(Memory.readPointer(p));
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[1]);
        analysis.disassembly = Memory.readCString(Memory.readPointer(p));
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[2]);
        analysis.address = Memory.readRword(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[3]);
        analysis.instSize = Memory.readU32(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[4]);
        analysis.affectControlFlow = Memory.readU8(p) == true;
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[5]);
        analysis.isBranch = Memory.readU8(p) == true;
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[6]);
        analysis.isCall = Memory.readU8(p) == true;
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[7]);
        analysis.isReturn = Memory.readU8(p) == true;
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[8]);
        analysis.isCompare = Memory.readU8(p) == true;
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[9]);
        analysis.isPredicable = Memory.readU8(p) == true;
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[10]);
        analysis.isMoveImm = Memory.readU8(p) == true;
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[11]);
        analysis.mayLoad = Memory.readU8(p) == true;
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[12]);
        analysis.mayStore = Memory.readU8(p) == true;
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[13]);
        analysis.loadSize = Memory.readU32(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[14]);
        analysis.storeSize = Memory.readU32(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[15]);
        analysis.condition = Memory.readU8(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[16]);
        analysis.flagsAccess = Memory.readU8(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[17]);
        var numOperands = Memory.readU8(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[18]);
        var operandsPtr = Memory.readPointer(p);
        analysis.operands = new Array(numOperands);
        for (var i = 0; i < numOperands; i++) {
            analysis.operands[i] = this._parseOperandAnalysis(operandsPtr);
            operandsPtr = operandsPtr.add(__classPrivateFieldGet(this, _VM_operandAnalysisStructDesc, "f").size);
        }
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[19]);
        var symbolPtr = Memory.readPointer(p);
        if (!symbolPtr.isNull()) {
            analysis.symbolName = Memory.readCString(symbolPtr);
        }
        else {
            analysis.symbolName = "";
        }
        analysis.symbol = analysis.symbolName; // deprecated Name
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[20]);
        analysis.symbolOffset = Memory.readU32(p);
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[21]);
        var modulePtr = Memory.readPointer(p);
        if (!modulePtr.isNull()) {
            analysis.moduleName = Memory.readCString(modulePtr);
        }
        else {
            analysis.moduleName = "";
        }
        analysis.module = analysis.moduleName; // deprecated Name
        p = ptr.add(__classPrivateFieldGet(this, _VM_instAnalysisStructDesc, "f").offsets[22]);
        analysis.cpuMode = Memory.readU8(p);
        Object.freeze(analysis);
        return analysis;
    }
}
_VM_vm = new WeakMap(), _VM_memoryAccessDesc = new WeakMap(), _VM_operandAnalysisStructDesc = new WeakMap(), _VM_instAnalysisStructDesc = new WeakMap(), _VM_vmStateStructDesc = new WeakMap(), _VM_userDataPtrMap = new WeakMap(), _VM_userDataIIdMap = new WeakMap(), _VM_userDataPointer = new WeakMap();
;